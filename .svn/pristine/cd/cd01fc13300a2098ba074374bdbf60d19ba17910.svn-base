package fxRpg;

import java.awt.Desktop;
import java.io.PrintStream;
import java.net.URI;
import java.net.URL;
import java.util.List;
import java.util.Random;
import java.util.ResourceBundle;

import fi.jyu.mit.fxgui.Dialogs;
import fi.jyu.mit.fxgui.ListChooser;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.scene.text.Font;
import rpg.Esine;
import rpg.Hahmo;
import rpg.HahmonEsine;
import rpg.Rodut;
import rpg.Rotu;
import rpg.Rpg;
import rpg.SailoException;
import fi.jyu.mit.fxgui.ModalController;
import fi.jyu.mit.fxgui.StringGrid;
import fi.jyu.mit.fxgui.TextAreaOutputStream;


/**
 * Luokka rpg käyttöliittymän tapahtumien hoitamiseksi
 * 
 * @author Ilari Massa
 * @version Feb 7, 2019
 *
 */
public class RpgGUIController implements Initializable {


    @FXML private ScrollPane panelHahmo;
    @FXML private ListChooser<Hahmo> chooserHahmot;
    @FXML private StringGrid<?> StringGridInventory;
    
    @Override
    public void initialize(URL arg0, ResourceBundle arg1) {
        alusta();        
    }
    @FXML
    void HandleAbout() {
        Dialogs.showMessageDialog("Vielä ei osata About");
    }
    
    @FXML
    void HandleClose() {
        tallenna();
        Platform.exit();
    }

    @FXML
    void HandleDelete() {
        Dialogs.showQuestionDialog("Halutaanko poistaa hahmo?","Do you wnat to delete character?","Yes", "No");
    }

    @FXML
    void HandleHelp() {
        apua();
    }


    @FXML
    private void HandleAddCharacter() {
        uusiHahmo();
    }

    @FXML
    private void HandleAddItem() {
        uusiEsine();
    }

    @FXML
    private void HandleClearStats() {
        Dialogs.showQuestionDialog("Haluatko clear stats?", "Do you want to clear all stats?", "Yes", "No");
    }

    @FXML
    private void HandleEdit() {
        Dialogs.showMessageDialog("Vielä ei osata handleEdit");
    }

    @FXML
    private void HandleFIle() {
        Dialogs.showMessageDialog("Vielä ei osata handleFile");
    }

    @FXML
    private void HandleModifyCharacter() {
        ModalController.showModal(RpgGUIController.class.getResource("CharacterMuokkausGUIView.fxml"), "Character", null, "");    
        }
    
    @FXML
    private void HandleModifyStats() {
        ModalController.showModal(RpgGUIController.class.getResource("StatsGUIView.fxml"), "Stats", null, "");    
    }

    @FXML
    private void HandleRemoveCharacter() {
        Dialogs.showQuestionDialog("Haluatko poistaa hahmon", "Do you want to delete character?", "Yes", "No");
    }

    @FXML
    private void HandleRemoveItem() {
        Dialogs.showQuestionDialog("Halutako poistaa esineen?", "Do you want to remove item?", "Yes", "No");
    }


    
    //=========================================================================================================

    private Rpg rpg;
    private Hahmo hahmoKohdalla;
    private TextArea areaHahmo = new TextArea();
    
    /*
     * Tekee tarvittavat muut alustukset, nyt vaihdetaan GridPanen tilalle
     * yksi iso tekstikenttä, johon voidaan tulostaa jäsenten tiedot
     * Alustetaan myös jäsen listan kuuntelija
     */
    private void alusta() {
        panelHahmo.setContent(areaHahmo);
        areaHahmo.setFont(new Font("Courier New", 12));
        panelHahmo.setFitToHeight(true);
        
        chooserHahmot.clear();
        chooserHahmot.addSelectionListener(e -> naytaHahmo());
    }
    
    /**
     * Näyttää llistasta valitun jäsenen tiedot, tilapäisesti yhteen isoon edit, kenttään
     */
    protected void naytaHahmo() {
        hahmoKohdalla = chooserHahmot.getSelectedObject();
        
        if (hahmoKohdalla == null) return;
        
        areaHahmo.setText("");
        try (PrintStream os = TextAreaOutputStream.getTextPrintStream(areaHahmo)) {
            tulosta(os,hahmoKohdalla);
        } catch (SailoException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
    /*
     * Luo uuden hahmon jota aletaan editoimaan
     */
    private void uusiHahmo() {
        Random rand = new Random();
        int rid  = 0 + rand.nextInt(3);
        
        Rodut uusirodut = new Rodut();
        int rotuid = 0;
        for (Rotu rotu : uusirodut) {
            if (rotu.getRotuID() == rid) {
                rotuid = rid;
            }
        }
        
        Hahmo uusi = new Hahmo();
        uusi.rekisteroi();
        uusi.taytaAkuAnkka(rotuid); // TODO: Korvaa sillä että aukeaa uusi dialogi
        try {
            rpg.lisaa(uusi);
        } catch (SailoException e) {
            // TODO Auto-generated catch block
            Dialogs.showMessageDialog("Ongelmia uuden luomisessa " + e.getMessage());
            return;
        }
        hae(uusi.getTunnusNro());
        
    }
    
    private void uusiEsine() {
        if (hahmoKohdalla == null) return;
        int id = hahmoKohdalla.getTunnusNro();
        
        Esine esine = new Esine();
        esine.rekisteroi();
        int iid = esine.getIDnumero();
        esine.taytaMiekka(id);
        
        HahmonEsine hahmonesine = new HahmonEsine(id , iid);
        hahmonesine.rekisteroi();
        hahmonesine.taytaHahmonEsine(esine.getNimi(),esine.getNotes());
        
        try {
            rpg.lisaa(hahmonesine);
        } catch (SailoException e) {
            Dialogs.showMessageDialog("Ongelmia uuden luomisessa " + e.getMessage());
            return;
        }
           
        hae(hahmoKohdalla.getTunnusNro()); 
    }
    
    /**
     * @param rpg Rpg jota käytetään täsää käyttöliittymässä
     */
    public void setRpg(Rpg rpg) {
        this.rpg = rpg;
        naytaHahmo();
    }
    
    /*
     * Hakee jäsenten tiedot listalle
     */
    private void hae(int jnro) {
        chooserHahmot.clear();
        
        int index = 0;
        for (int i = 0; i < rpg.getHahmoja(); i++) {
            Hahmo hahmo = rpg.annaHahmo(i);
            if( hahmo.getTunnusNro() == jnro) index = i;
            chooserHahmot.add(hahmo.getNimi(), hahmo);
        }
        
        chooserHahmot.getSelectionModel().select(index);
    }
    /*
    protected void hae2(int jnro) {
        StringGridInventory.clear();
        
        for(int i = 0; i < rpg.getHahmoja(); i++) {
            
        }
    }
    */
    
    /**
     * Tarkistetaan onko tallennus tehty
     * @return true jos saa sulkea sovelluksen, false jos ei
     */
    public boolean voikoSulkea() {
        tallenna();
        return true;
    }
    /*
     * tallentaa hahmon 
     */
    private void tallenna() {
        Dialogs.showMessageDialog("Tallennetetaan! Mutta ei toimi vielä");
    }
    /**
     * kun käyttäjä painaa help, niin metodi vie käyttäjän projektin tim sivulle
     */
    private void apua() {
        try {
            Desktop desktop = java.awt.Desktop.getDesktop();
            URI oURL = new URI ("https://tim.jyu.fi/view/kurssit/tie/ohj2/2019k/ht/ilahilma");
            desktop.browse(oURL);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Tulostaa adminin tiedot
     * @param os tietovirta johon tulostetaan
     * @param hahmo tulostettava hahmo
     * @throws SailoException jos ei onnistu
     */
    public void tulosta(PrintStream os, final Hahmo hahmo) throws SailoException  {
        os.println("----------------------------------------------");
        hahmo.tulosta(os);
        os.println("----------------------------------------------");
        List<HahmonEsine> loytyneet = rpg.annaEsineet(hahmo);
        for (HahmonEsine esine : loytyneet)
            esine.tulosta(os);
    }
   
    
}
