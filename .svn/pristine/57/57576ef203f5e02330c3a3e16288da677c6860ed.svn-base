package rpg;

/**
 * Rpg:n jäsenistö joka osaa mm. lisätä uuden hahmon
 * 
 * @author Ilari Massa
 * @version Feb 28, 2019
 *
 */
public class Hahmot {
    private static final int MAX_HAHMOJA  = 5;
    private int              lkm          = 0;
    private String           tiedostonNimi= "";
    private Hahmo            alkiot[]     = new Hahmo[MAX_HAHMOJA];
    
    /**
     * Oletus muodostaja
     */
    public Hahmot() {
        //
    }
    
    /**
     * Lisaa uuden jasenen tietorakenteeseen. Ottaa jäsenen omistukseensa
     * @param hahmo lisattavan hahmon viite
     * @throws SailoException jos tietorakenne on jo täynnä
     * @example
     * <pre name="test">
     *  #THROWS SailoExcpetion
     *  Hahmot hahmot = new Hahmot();
     *  Hahmo aku1 = new Hahmo(); Hahmo aku2 = new Hahmo();
     *  hahmot.getLkm() === 0;
     *  hahmot.lisaa(aku1); hahmot.getLkm() === 1;
     *  hahmot.lisaa(aku2); hahmot.getLkm() === 2;
     *  hahmot.lisaa(aku1); hahmot.getLkm() === 3;
     *  hahmot.anna(0) === aku1;
     *  hahmot.anna(1) === aku2;
     *  hahmot.anna(2) === aku1;
     *  hahmot.anna(1) == aku1 === false;
     *  hahmot.anna(3) === aku1; #THROWS IndexOutOfBoundsException
     *  hahmot.lisaa(aku1); hahmot.getLkm() === 4;
     *  hahmot.lisaa(aku1); hahmot.getLkm() === 5;
     *  hahmot.lisaa(aku1); #THROWS SailoException
     * </pre>
     */
    public void lisaa(Hahmo hahmo) throws SailoException {
        if (lkm >= alkiot.length) throw new SailoException("Liikaa alkioita");
        alkiot[lkm] = hahmo;
        lkm++;
    }
    
    /**
     * palauttaa viitteen i:teen jäsenen
     * @param i monenko jäsenen viite halutaan
     * @return viite jäseneen, jonko indeksi on i
     * @throws IndexOutOfBoundsException jos i ei ole salitulla alueella
     */
    public Hahmo anna(int i) throws IndexOutOfBoundsException {
        if (i<0 || lkm <= i)
            throw new IndexOutOfBoundsException("Laiton indeksi:" + i);
        return alkiot[i];
    }
    
    /**
     * Lukee jäsenistön tiedostosta. Kesken
     * @param hakemisto tiedoston hakemisto
     * @throws SailoException jos lukeminen epäonnistuu
     */
    public void lueTiedostosta(String hakemisto) throws SailoException {
        tiedostonNimi = hakemisto + "/hahmit.dat";
        throw new SailoException("Ei osata vielä lukea tiedostoa " + tiedostonNimi);
    }
    
    /**
     * Testiohjelma jäsenistölle
     * @throws SailoException jos talletus epäonnistuu
     */
    public void talleta() throws SailoException {
        throw new SailoException("Ei osata vielä tallettaa tiedostoa" + tiedostonNimi);
    }
    
    /**
     * Palauttaa Rpg:n hahmojen lukumäärän;
     * @return jäsenten lukumäärä
     */
    public int getLkm() {
        return lkm;
    }
    
    /**
     * Testiohjelmajäsenistölle
     * @param args ei käytössä
     */
    public static void main(String args[]) {
        Hahmot hahmot = new Hahmot();
        
        Hahmo aku = new Hahmo(), aku2 = new Hahmo();
        aku.rekisteroi();
        aku.taytaAkuAnkka();
        aku2.rekisteroi();
        aku2.taytaAkuAnkka();
        
        try {
            hahmot.lisaa(aku);
            hahmot.lisaa(aku2);
            
            System.out.println("============ Jäsenet testi ============");
            
            for ( int i = 0; i < hahmot.getLkm(); i++) {
                Hahmo hahmo = hahmot.anna(i);
            System.out.println("Jäsen nro: " + i);
            hahmo.tulosta(System.out);
            }
        
        } catch (SailoException ex) {
            System.out.println(ex.getMessage());
                
        }
        
    }
}


