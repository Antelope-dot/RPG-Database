package fxRpg;

import java.io.PrintStream;
import java.net.URL;
import java.util.ResourceBundle;

import fi.jyu.mit.fxgui.Dialogs;
import fi.jyu.mit.fxgui.ListChooser;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.scene.text.Font;
import rpg.Hahmo;
import rpg.Rpg;
import rpg.SailoException;
import fi.jyu.mit.fxgui.ModalController;
import fi.jyu.mit.fxgui.TextAreaOutputStream;


/**
 * Luokka rpg käyttöliittymän tapahtumien hoitamiseksi
 * 
 * @author Ilari Massa
 * @version Feb 7, 2019
 *
 */
public class RpgGUIController implements Initializable {


    @FXML private ScrollPane panelHahmo;
    @FXML private ListChooser<Hahmo> chooserHahmot;
    
    @Override
    public void initialize(URL arg0, ResourceBundle arg1) {
        alusta();        
    }
    @FXML
    void HandleAbout() {
        Dialogs.showMessageDialog("Vielä ei osata About");
    }
    
    @FXML
    void HandleClose() {
        //Dialogs.showMessageDialog("Vielä ei osata close");
        voikoSulkea();
    }

    @FXML
    void HandleDelete() {
        Dialogs.showMessageDialog("Vielä ei osata delete");
    }

    @FXML
    void HandleHelp() {
        Dialogs.showMessageDialog("Vielä ei osata Help");
    }


    @FXML
    private void HandleAddCharacter() {
        uusiHahmo();
    }

    @FXML
    private void HandleAddItem() {
        ModalController.showModal(RpgGUIController.class.getResource("ItemsGUIView.fxml"), "Items", null, "");
    }

    @FXML
    private void HandleClearStats() {
        Dialogs.showMessageDialog("Vielä ei osata clear statteja");
    }

    @FXML
    private void HandleEdit() {
        Dialogs.showMessageDialog("Vielä ei osata handleEdit");
    }

    @FXML
    private void HandleFIle() {
        Dialogs.showMessageDialog("Vielä ei osata handleFile");
    }

    @FXML
    private void HandleModifyCharacter() {
        ModalController.showModal(RpgGUIController.class.getResource("CharacterMuokkausGUIView.fxml"), "Character", null, "");    
        }
    
    @FXML
    private void HandleModifyStats() {
        ModalController.showModal(RpgGUIController.class.getResource("StatsGUIView.fxml"), "Stats", null, "");    
    }

    @FXML
    private void HandleRemoveCharacter() {
        Dialogs.showMessageDialog("Vielä ei osata poistaa hahmoa");
    }

    @FXML
    private void HandleRemoveItem() {
        Dialogs.showMessageDialog("Vielä ei osata poistaa itemia");
    }


    
    //=========================================================================================================

    private Rpg rpg;
    private Hahmo hahmoKohdalla;
    private TextArea areaHahmo = new TextArea();
    
    /*
     * Tekee tarvittavat muut alustukset, nyt vaihdetaan GridPanen tilalle
     * yksi iso tekstikenttä, johon voidaan tulostaa jäsenten tiedot
     * Alustetaan myös jäsen listan kuuntelija
     */
    private void alusta() {
        panelHahmo.setContent(areaHahmo);
        areaHahmo.setFont(new Font("Courier New", 12));
        panelHahmo.setFitToHeight(true);
        
        chooserHahmot.clear();
        chooserHahmot.addSelectionListener(e -> naytaHahmo());
    }
    
    /**
     * Näyttää llistasta valitun jäsenen tiedot, tilapäisesti yhteen isoon edit, kenttään
     */
    protected void naytaHahmo() {
        hahmoKohdalla = chooserHahmot.getSelectedObject();
        
        if (hahmoKohdalla == null) return;
        
        areaHahmo.setText("");
        try (PrintStream os = TextAreaOutputStream.getTextPrintStream(areaHahmo)) {
            hahmoKohdalla.tulosta(os);
        }
    }
    
    /*
     * Luo uuden hahmon jota aletaan editoimaan
     */
    private void uusiHahmo() {
        Hahmo uusi = new Hahmo();
        uusi.rekisteroi();
        uusi.taytaAkuAnkka(); // TODO: Korvaa sillä että aukeaa uusi dialogi
        try {
            rpg.lisaa(uusi);
        } catch (SailoException e) {
            // TODO Auto-generated catch block
            Dialogs.showMessageDialog("Ongelmia uuden luomisessa " + e.getMessage());
            return;
        }
        hae(uusi.getTunnusNro());
        
    }
    
    /**
     * @param rpg Rpg jota käytetään täsää käyttöliittymässä
     */
    public void setRpg(Rpg rpg) {
        this.rpg = rpg;
        naytaHahmo();
    }
    
    /*
     * Hakee jäsenten tiedot listalle
     */
    private void hae(int jnro) {
        chooserHahmot.clear();
        
        int index = 0;
        for (int i = 0; i < rpg.getHahmoja(); i++) {
            Hahmo hahmo = rpg.annaHahmo(i);
            if( hahmo.getTunnusNro() == jnro) index = i;
            chooserHahmot.add(hahmo.getNimi(), hahmo);
        }
        
        chooserHahmot.getSelectionModel().select(index);
    }
    
    /**
     * Tarkistetaan onko tallennus tehty
     * @return true jos saa sulkea sovelluksen, false jos ei
     */
    public boolean voikoSulkea() {
        tallenna();
        return true;
    }
    
    private void tallenna() {
        Dialogs.showMessageDialog("Tallennetetaan! Mutta ei toimi vielä");
    }
    
   
    
}
