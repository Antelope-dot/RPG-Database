package rpg;

import java.util.*;
/**
 * @author Ilari Massa
 * @version Mar 18, 2019
 *
 */
public class HahmojenEsineet {
    private static final int MAX_HAHMOJENESINEET = 20;

    //private HahmojenEsineet[]          alkiot        = new HahmonEsine[MAX_HAHMOJENESINEET];
    
    
    private String tiedostonNimi = "";
    
    /** Lista tyyleistÃ¤ */
    private final List<HahmonEsine> alkiot = new ArrayList<HahmonEsine>();
    
    
    /**
     * Tyylien alustaminen.
     */
    public HahmojenEsineet() {
        // ei tee toistaiseksi mitään
    }
    
    /**
     * Lisää uuden hahmonesineen tietorakenteeseen. Ottaa hahmonesineet omistukseensa.
     * @param esine lisÃ¤ttÃ¤vÃ¤ tyyli
     * @throws SailoException jos lisÃ¤Ã¤minen epÃ¤onnistuu
     */
    public void lisaa(HahmonEsine esine) throws SailoException {
        //alkiot.add(tyyli);
        if (alkiot.size() >= MAX_HAHMOJENESINEET) throw new SailoException("Liikaa alkioita");
        alkiot.add(esine);
    }
    
    /**
     * Iteraattori kaikkien esineiden läpikäyymiseen
     * @return esine-iteraattori
     */
    //@Override
    public Iterator<HahmonEsine> iterator() {
        return alkiot.iterator();
    }
    
    /**
     * Lukee HahmojenEsineet tiedostosta. 
     * TODO kesken
     * @param hakemisto tiedoston hakemisto
     * @throws SailoException jos lukeminen epÃ¤onnistuu
     */
    public void lueTiedostosta(String hakemisto) throws SailoException {
        tiedostonNimi = hakemisto + ".tyylit";
        throw new SailoException("Ei osata vielÃ¤ lukea tiedostoa " + tiedostonNimi);
    }
    
    /**
     * Tallentaa hahmojenEsineet tiedostoon.
     * TODO kesken
     * @throws SailoException jos tallennus epÃ¤onnistuu
     */
    public void tallenna() throws SailoException {
        throw new SailoException("Ei osata vielÃ¤ tallentaa tiedostoa " + tiedostonNimi);
    }
    
    
    /**
     * Palauttaa hahmojen esineiden lukumÃ¤Ã¤rÃ¤n.
     * @return tyylien lukumÃ¤Ã¤rÃ¤
     */
    public int getLkm() {
        return alkiot.size();
    }
    
    
    /**
     * @param idx Hahmonesineen indexi
     * @return indeksin mukainen esine
     * @throws IndexOutOfBoundsException jos indeksi on listan ulkopuolella
     */
    public HahmonEsine get(int idx) throws IndexOutOfBoundsException {
        if(idx<0 || alkiot.size() <= idx) throw new IndexOutOfBoundsException("Indeksi "+idx+" ei listassa");
        return alkiot.get(idx);
    }
    /**
     * Haetaan hahmon esineet
     * @param tunnusNro hahmon jonka esineitää haetaan
     * @return tietorakenne josta viite löydettän
     * @example
     * <pre name="test">
     * #import java.util.*;
     * HahmojenEsineet hj = new HahmojenEsineet();
     *  HahmonEsine tyyli1 = new HahmonEsine(1); hj.lisaa(tyyli1);
     *  HahmonEsine tyyli2 = new HahmonEsine(2); hj.lisaa(tyyli2);
     *  HahmonEsine tyyli5 = new HahmonEsine(5); hj.lisaa(tyyli5);
     *  List<HahmonEsine> loytyneet;
     *  loytyneet = hj.annaHahmonEsine(4);
     *  loytyneet.size() === 0; 
     *  loytyneet = hj.annaHahmonEsine(1);
     *  loytyneet.size() === 1; 
     *  loytyneet.get(0) == tyyli1 === true;
     * </pre> 
     */
    public List<HahmonEsine> annaHahmonEsine(int tunnusNro) {
        List<HahmonEsine> loydetyt = new ArrayList<HahmonEsine>();
        for(HahmonEsine esine : alkiot)
            if(esine.getTunnusNro() == tunnusNro) loydetyt.add(esine);
        
        return loydetyt;
    }
    
    /**
     * Testiohjelma HahmonEsineille.
     * @param args ei kÃ¤ytÃ¶ssÃ¤
     */
    public static void main(String[] args) {
        HahmojenEsineet esineet = new HahmojenEsineet();
        Esine miekka = new Esine();
        miekka.rekisteroi();
        miekka.taytaMiekka(1);
        int id = miekka.getTunnusNro();
        
        HahmonEsine esine = new HahmonEsine(id,1);
        esine.taytaHahmonEsine(miekka.getNimi(),miekka.getNotes());
        try {
            esineet.lisaa(esine);
        } catch (SailoException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //HahmonEsine kirves = new HahmonEsine();
        //kirves.taytaHahmonEsine(kirves.getNimi());
        //HahmonEsine keihas = new HahmonEsine();
        //keihas.taytaHahmonEsine(3);
        //HahmonEsine nuija = new HahmonEsine();
        //HahmonEsine.taytaHahmonEsine(4);

        //esineet.lisaa(keihas);
        //esineet.lisaa(nuija);
        //esineet.lisaa(kirves);
        //esineet.lisaa(nuija);
        //esineet.lisaa(miekka);

        System.out.println("============= HahmonEsineet testi =================");

        List<HahmonEsine> esineet2 = esineet.annaHahmonEsine(1);
       
        for (HahmonEsine esin : esineet2) {
            System.out.print(esin.getTunnusNro() + " ");
            esin.tulosta(System.out);
        }
        
    }
    
}
